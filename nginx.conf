```
# 定义Nginx运行的用户和用户组
user  www www;

# nginx进程数，建议设置为等于CPU总核心数
worker_processes  1;

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 进程文件
#pid        logs/nginx.pid;

# 工作模式与连接数上限
events {
		# 单个进程最大连接数（最大连接数=连接数*进程数）
		worker_connections  1024;
		# 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
		# epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型
		# 如果跑在FreeBSD上面，就用kqueue模型
		# use epoll;
}

# 设定http服务器
http {
     # 文件扩展名与文件类型映射表
     include       mime.types;
     
     # 默认文件类型
     default_type  application/octet-stream;
     
     # 默认编码
     #charset utf-8; 
     
     # 日志格式设定
     #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
     #                  '$status $body_bytes_sent "$http_referer" '
     #                  '"$http_user_agent" "$http_x_forwarded_for"';
     #access_log  logs/access.log  main;
     
     # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，
     # 对于普通应用设为on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，
     # 以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
     sendfile        on;
     
     #防止网络阻塞
     #tcp_nopush     on;
     
     #长连接超时时间，单位是秒
     keepalive_timeout  65;
     
     # gzip模块设置
     # 开启gzip压缩输出
     #gzip  on;
     
     # 虚拟主机的配置
     server {
     		#监听端口
        listen       8080;
        
        # 域名可以有多个，用空格隔开
        server_name  localhost;
			# 编码
        #charset koi8-r;

			# 定义本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm index.php;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}
        
        # 对 "/" 启用反向代理
			location / {
					proxy_pass http://127.0.0.1:88;
					proxy_redirect off;
					proxy_set_header X-Real-IP $remote_addr;
					# 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
					proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
					# 以下是一些反向代理的配置，可选。
					proxy_set_header Host $host;
					# 允许客户端请求的最大单文件字节数
					client_max_body_size 10m; 
					# 缓冲区代理缓冲用户端请求的最大字节数
					client_body_buffer_size 128k; 
					# nginx跟后端服务器连接超时时间(代理连接超时)
					proxy_connect_timeout 90; 
					# 后端服务器数据回传时间(代理发送超时)
					proxy_send_timeout 90;
					# 连接成功后，后端服务器响应时间(代理接收超时) 
					proxy_read_timeout 90;
					# 设置代理服务器（nginx）保存用户头信息的缓冲区大小 
					proxy_buffer_size 4k;
					# proxy_buffers缓冲区，网页平均在32k以下的设置 
					proxy_buffers 4 32k; 
					# 高负荷下缓冲大小（proxy_buffers*2）
					proxy_busy_buffers_size 64k;
					# 设定缓存文件夹大小，大于这个值，将从upstream服务器传
					proxy_temp_file_write_size 64k;
			}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    #include servers/*;
    # 自定义的默认配置文件
    include /etc/nginx/conf.d/default.conf;
}
